#!/usr/bin/env python3
"""
TinyBMS-Victron Bridge - SPIFFS Deployment Script
Automatise la copie et l'upload des fichiers web vers ESP32
"""

import os
import sys
import shutil
from pathlib import Path

# Configuration
PROJECT_ROOT = Path(__file__).parent.parent
DATA_SOURCE = PROJECT_ROOT / "web-interface" / "data"
DATA_TARGET = PROJECT_ROOT / "data"

def print_header(text):
    """Affiche un en-t√™te format√©"""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70)

def check_prerequisites():
    """V√©rifie que les pr√©requis sont pr√©sents"""
    print_header("V√©rification des pr√©requis")
    
    # V√©rifier PlatformIO
    if shutil.which("pio") is None:
        print("‚ùå PlatformIO CLI non trouv√©")
        print("   Installer avec: pip install platformio")
        return False
    print("‚úÖ PlatformIO CLI trouv√©")
    
    # V√©rifier platformio.ini
    if not (PROJECT_ROOT / "platformio.ini").exists():
        print("‚ùå platformio.ini non trouv√©")
        print("   Assurez-vous d'√™tre dans le dossier du projet")
        return False
    print("‚úÖ platformio.ini trouv√©")
    
    return True

def copy_web_files():
    """Copie les fichiers web dans le dossier data/"""
    print_header("Copie des fichiers web")
    
    if not DATA_SOURCE.exists():
        print(f"‚ùå Dossier source non trouv√©: {DATA_SOURCE}")
        return False
    
    # Cr√©er le dossier data/ s'il n'existe pas
    DATA_TARGET.mkdir(exist_ok=True)
    
    # Copier tous les fichiers
    files_copied = 0
    for file in DATA_SOURCE.glob("*.*"):
        target_file = DATA_TARGET / file.name
        shutil.copy2(file, target_file)
        print(f"‚úÖ Copi√©: {file.name}")
        files_copied += 1
    
    print(f"\nüì¶ {files_copied} fichiers copi√©s dans {DATA_TARGET}")
    return True

def check_spiffs_config():
    """V√©rifie la configuration SPIFFS dans platformio.ini"""
    print_header("V√©rification configuration SPIFFS")
    
    platformio_ini = PROJECT_ROOT / "platformio.ini"
    content = platformio_ini.read_text()
    
    if "board_build.filesystem = spiffs" in content:
        print("‚úÖ SPIFFS configur√© dans platformio.ini")
        return True
    else:
        print("‚ö†Ô∏è  SPIFFS non configur√©")
        print("\nAjouter dans platformio.ini:")
        print("  board_build.filesystem = spiffs")
        
        response = input("\nVoulez-vous que je l'ajoute automatiquement ? (o/n): ")
        if response.lower() == 'o':
            with open(platformio_ini, 'a') as f:
                f.write("\nboard_build.filesystem = spiffs\n")
            print("‚úÖ Configuration ajout√©e")
            return True
        return False

def upload_spiffs():
    """Upload les fichiers vers l'ESP32"""
    print_header("Upload SPIFFS vers ESP32")
    
    print("üì§ Lancement de l'upload SPIFFS...")
    print("   (Cela peut prendre 1-2 minutes)\n")
    
    result = os.system("pio run --target uploadfs")
    
    if result == 0:
        print("\n‚úÖ Upload SPIFFS r√©ussi!")
        return True
    else:
        print("\n‚ùå Erreur lors de l'upload SPIFFS")
        print("   V√©rifier que l'ESP32 est connect√©")
        return False

def upload_firmware():
    """Upload le firmware vers l'ESP32"""
    print_header("Upload Firmware vers ESP32")
    
    response = input("\nVoulez-vous aussi uploader le firmware ? (o/n): ")
    if response.lower() != 'o':
        print("‚è≠Ô∏è  Upload firmware ignor√©")
        return True
    
    print("\nüì§ Lancement de l'upload firmware...")
    result = os.system("pio run --target upload")
    
    if result == 0:
        print("\n‚úÖ Upload firmware r√©ussi!")
        return True
    else:
        print("\n‚ùå Erreur lors de l'upload firmware")
        return False

def main():
    """Fonction principale"""
    print("\n" + "üîã" * 35)
    print("  TinyBMS-Victron Bridge - D√©ploiement Interface Web")
    print("üîã" * 35)
    
    # 1. V√©rifier pr√©requis
    if not check_prerequisites():
        sys.exit(1)
    
    # 2. Copier fichiers
    if not copy_web_files():
        sys.exit(1)
    
    # 3. V√©rifier config SPIFFS
    if not check_spiffs_config():
        print("\n‚ö†Ô∏è  Configuration SPIFFS requise")
        sys.exit(1)
    
    # 4. Upload SPIFFS
    if not upload_spiffs():
        sys.exit(1)
    
    # 5. Upload firmware (optionnel)
    upload_firmware()
    
    # R√©sum√© final
    print_header("‚úÖ D√âPLOIEMENT TERMIN√â")
    print("\nüìù Prochaines √©tapes:")
    print("  1. Red√©marrer l'ESP32")
    print("  2. V√©rifier l'IP dans les logs s√©rie")
    print("  3. Acc√©der √† http://[IP-ESP32]/")
    print("\nüí° Commande pour voir les logs:")
    print("     pio device monitor\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  D√©ploiement interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        sys.exit(1)
